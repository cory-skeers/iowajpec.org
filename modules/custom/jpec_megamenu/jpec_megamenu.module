<?php

/**
 * Implements hook_block_info().
 */
function jpec_megamenu_block_info() {
  $blocks['jpec_megamenu_main'] = array(
    'info' => t('JPEC Mega Menu'),
    'status' => TRUE,
    'region' => 'navigation',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function jpec_megamenu_block_view($delta = '') {
  $config = array(
    'menu_name' => 'main-menu',
    'max_depth' => 3,
    'delta' => variable_get('jpec_megamenu_main'),
  );

  $block = array();

  if ($delta == 'jpec_megamenu_main') {
    $block['subject'] = '';
    $block['content'] = array(
      '#type' => 'container',
      'links' => jpec_megamenu_contents($config),
    );
    $block['content']['links']['#theme_wrappers'] = array('menu_tree__jpec_megamenu__main_menu_first_level');
  }
  return $block;
}

/**
 * Get the rendered main menu.
 */
function jpec_megamenu_contents($config) {
  $tree = jpec_megamenu_tree_block_data($config);
  $result = jpec_megamenu_tree_output($tree, $config);

  return $result;
}

/**
 * Gets the data structure representing a menu tree for the given configuration.
 *
 * @param array $config
 *   See the parameters of menu_tree_all_data().
 *
 * @return array
 */
function jpec_megamenu_tree_block_data(array &$config) {
  $tree = menu_tree_all_data($config['menu_name'], NULL, $config['max_depth']);

  return $tree;
}

/**
 * Returns a renderable menu tree.
 *
 * This is a customized copy of menu_block_tree_output().
 *
 * @param array $tree
 *   A data structure representing the tree as returned from menu_tree_data.
 * @param array $config
 *
 * @return array
 *   The menu tree as a render array.
 */
function jpec_megamenu_tree_output(array &$tree, array $config = array()) {
  $build = array();
  $items = array();

  $hook_delta = str_replace('-', '_', $config['delta']);
  $hook_menu_name = str_replace('-', '_', $config['menu_name']);

  // Pull out just the menu links we are going to render so that we
  // get an accurate count for the first/last classes.
  foreach ($tree as $key => &$value) {
    if ($tree[$key]['link']['access'] && !$tree[$key]['link']['hidden']) {
      $items[] = $tree[$key];
    }
  }

  $router_item = menu_get_item();
  $num_items = count($items);
  $begin_misfits_megamenu_column = TRUE;

  foreach ($items as $i => &$data) {
    $class = array();
    if ($i == 0) {
      $class[] = 'first';
    }
    if ($i == $num_items - 1) {
      $class[] = 'last';
    }
    // Set a class for the <li>-tag. Since $data['below'] may contain local
    // tasks, only set 'expanded' class if the link also has children within
    // the current menu.
    if ($data['link']['has_children'] && $data['below']) {
      $class[] = 'expanded';
      $class[] = 'dropdown';
    }
    elseif ($data['link']['has_children']) {
      $class[] = 'collapsed';
    }
    else {
      $class[] = 'leaf';
    }
    if (!empty($data['link']['leaf_has_children'])) {
      $class[] = 'has-children';
    }
    // Set a class if the link is in the active trail.
    if ($data['link']['in_active_trail']) {
      $class[] = 'active-trail';
      $data['link']['localized_options']['attributes']['class'][] = 'active-trail';
    }
    if ($data['link']['href'] == $_GET['q'] || ($data['link']['href'] == '<front>' && drupal_is_front_page())) {
      $class[] = 'active';
    }
    // Set a menu link ID class.
    $class[] = 'menu-mlid-' . $data['link']['mlid'];

    // Set a link depth class.
    $class[] = 'link-depth-' . $data['link']['depth'];
    // Normally, l() compares the href of every link with $_GET['q'] and sets
    // the active class accordingly. But local tasks do not appear in menu
    // trees, so if the current path is a local task, and this link is its
    // tab root, then we have to set the class manually.
    if ($data['link']['href'] == $router_item['tab_root_href'] && $data['link']['href'] != $_GET['q']) {
      $data['link']['localized_options']['attributes']['class'][] = 'active';
    }

    // Allow menu-specific theme overrides.
    $element['#theme'] = array(
      'menu_link__jpec_megamenu__' . $hook_delta,
      'menu_link__jpec_megamenu__' . $hook_menu_name,
      'menu_link__jpec_megamenu',
      'menu_link__menu_block__' . $hook_delta,
      'menu_link__menu_block__' . $hook_menu_name,
      'menu_link__menu_block',
      'menu_link__' . $hook_menu_name,
      'menu_link',
    );
    $element['#attributes']['class'] = $class;
    $element['#title'] = $data['link']['title'];
    $element['#href'] = $data['link']['href'];
    $element['#localized_options'] = !empty($data['link']['localized_options']) ? $data['link']['localized_options'] : array();
    $element['#below'] = $data['below'] ? jpec_megamenu_tree_output($data['below'], $config) : $data['below'];
    $element['#original_link'] = $data['link'];
    $element['#bid'] = array('module' => 'jpec_megamenu', 'delta' => $config['delta']);

    // Add a class that matches the link title.
    $link_title = strip_tags($element['#title']);
    $element['#attributes']['class'][] = 'menu-link-' . drupal_html_class($link_title);

    // Add markers for megamenu columns.
    $element['megamenu_column_start'] = FALSE;
    $element['megamenu_column_end'] = FALSE;
    if ($data['link']['depth'] == '2') {
      // We will wrap second-level list items which have children in columns.
      if ($data['below']) {
        $element['megamenu_column_start'] = TRUE;
        $element['megamenu_column_end'] = TRUE;
      }

      else {
        // We will prefix the first second-level list item which does not have
        // children with the opening of a column.
        if ($begin_misfits_megamenu_column) {
          $element['megamenu_column_start'] = TRUE;
          $begin_misfits_megamenu_column = FALSE;
        }

        // We will suffix the last second-level list item which does not have
        // children with the closing of a column.
        if ($i == $num_items - 1) {
          $elements['megamenu_column_end'] = TRUE;
        }
      }
    }

    // Index using the link's unique mlid.
    $build[$data['link']['mlid']] = $element;
  }
  if ($build) {
    // Make sure drupal_render() does not re-order the links.
    $build['#sorted'] = TRUE;
    // Add the theme wrapper for outer markup.
    // Allow menu-specific theme overrides.
    $build['#theme_wrappers'][] = array(
      'menu_tree__jpec_megamenu__' . $hook_delta,
      'menu_tree__jpec_megamenu__' . $hook_menu_name,
      'menu_tree__jpec_megamenu',
      'menu_tree__menu_block__' . $hook_delta,
      'menu_tree__menu_block__' . $hook_menu_name,
      'menu_tree__menu_block',
      'menu_tree__' . $hook_menu_name,
      'menu_tree',
    );
  }

  return $build;
}

/**
 * Implements hook_theme().
 */
function jpec_megamenu_theme(&$existing, $type, $theme, $path) {
  return array(
    'menu_link__jpec_megamenu' => array(
      'render element' => 'element',
      'function' => 'jpec_megamenu_menu_link',
    ),
  );
}

/**
 * Custom theme function to create columns in mega menus.
 */
function jpec_megamenu_menu_link($variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }

  if ($element['#original_link']['depth'] == '1') {
    // Split the link title into an array with up to 2 values -
    // the first word and all other words.
    $split_title = explode(' ', $element['#title'], 2);

    // Wrap the first word in a span.
    $joined_title = '<span class="first-word">' . $split_title[0] . '</span>';

    // Append all other words (if there are any).
    if (isset($split_title[1])) {
      $joined_title .= ' ' . $split_title[1];
    }

    $element['#title'] = $joined_title;

    // Allow HTML in the link title.
    $element['#localized_options']['html'] = TRUE;

    if ($element['#original_link']['has_children'] == '1') {
      $element['#localized_options']['attributes'] = array(
        'class' => array('dropdown-toggle'),
        'data-toggle' => array('dropdown'),
        'role' => array('button'),
        'aria-haspopup' => array('true'),
        'aria-expanded' => array('false'),
      );

      $element['#title'] = $element['#title'] . '<span class="caret"></span>';
    }
  }

  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  $list_item = '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";

  if ($element['megamenu_column_start']) {
    $list_item = '<ol class="megamenu-column">' . $list_item;
  }

  if ($element['megamenu_column_end']) {
    $list_item = $list_item . '</ol>';
  }

  return $list_item;
}
